import fl.transitions.Tween;
import fl.transitions.easing.Strong;
import fl.transitions.TweenEvent;

// duration in seconds of line animation
var DURATION = 0.5;

// full screen
fullscreen_btn.addEventListener(MouseEvent.CLICK, fullscreenF);
function fullscreenF(event:MouseEvent)
{
    if (stage.displayState == StageDisplayState.NORMAL) {
        stage.displayState=StageDisplayState.FULL_SCREEN;
    } else {
        stage.displayState=StageDisplayState.NORMAL;
    }
}

// point and line arrays
var points:Array = new Array();
var lines:Array = new Array();
var line_masks:Array = new Array();

// point functions
function comparePoints(p1:Point, p2:Point):int {
	if (p1.x < p2.x)
		return -1;
	else if (p1.x == p2.x) {
		if (p1.y < p2.y)
			return -1;
		else if (p1.y == p2.y)
			return 0;
		else
			return 1;
	}
	else
		return 1;
}

function CCW(p1:Point, p2:Point, p3:Point):int {
	var det = p1.x*(p2.y-p3.y)-p2.x*(p1.y-p3.y)+p3.x*(p1.y-p2.y);

	if (det < 0)
		return -1;
	else if (det > 0)
		return 1;
	else
		return 0;
}
function sqDist(p1:Point, p2:Point):int {
	var x_dist = p2.x - p1.x;
	var y_dist = p2.y - p1.y;
	return x_dist * x_dist + y_dist * y_dist;
}

// line functions
function addLine(p1:Point, p2:Point) {
	// draw line mask
	var line_mask:Mask = new Mask();
	line_mask.x = p1.x;
	line_mask.y = p1.y;
	line_mask.rect_mc.width = 0;
	var x_dist = p2.x - p1.x;
	var y_dist = p2.y - p1.y;
	var angle = Math.atan(y_dist/x_dist) * 180 / Math.PI;
	if (x_dist < 0)
		angle += 180;
    if (x_dist >= 0 && y_dist < 0)
		angle += 360;
	line_mask.rotation = angle;

	// draw line
	var line:MovieClip = new MovieClip();
	line.graphics.lineStyle(1);
	line.graphics.moveTo(p1.x, p1.y);
	line.graphics.lineTo(p2.x, p2.y);
	line.mask = line_mask;

	// show line and line mask
	addChild(line);
	addChild(line_mask);

	// add line and mask to array
	lines.push(line);
	line_masks.push(line_mask);
}

function removeLines() {
	var line:MovieClip;
	while ((line = lines.pop()) != null) {
		removeChild(line);
		removeChild(line_masks.pop());
	}
	find_mc.enabled = true;
}

/**************************************************************/

click_area_btn.addEventListener(MouseEvent.CLICK, clickE);
function clickE(e:MouseEvent) {
	// remove lines and actions
	removeLines();
	removeActions();

	// get coordinates
	var x_coor:int = e.stageX;
	var y_coor:int = e.stageY;

	// clear message
	message_txt.text = "";

	// ignore if point already in set
	for (var i = 0; i < points.length; i++) {
		if (points[i].x == x_coor && points[i].y == y_coor) {
			message_txt.text = "Point already in set.";
			return;
		}
	}

	// add point to set
	var point:Point = new Point();
	point.x = x_coor;
	point.y = y_coor;
	points.push(point);
	addChild(point);
}

clear_mc.addEventListener(MouseEvent.CLICK, clearE);
function clearE(e:MouseEvent) {
	// remove lines and actions
	removeLines();
	removeActions();

	// remove all points
	var point:Point;
	while ((point = points.pop()) != null)
		removeChild(point);
	message_txt.text = "Points cleared.";
}

find_mc.addEventListener(MouseEvent.CLICK, findE);
function findE(e:MouseEvent) {
	// remove lines and actions
	removeLines();
	removeActions();

	// do nothing if already constructed
	if (lines.length != 0)
		return;

	message_txt.text = "Building convex hull...";

	// output lines
	var output:Array = Chan(points);
	if (output.length > 1) {
		for (var i = 1; i < output.length; i++)
			addLine(output[i-1], output[i]);
		addLine(output[output.length-1], output[0]);
	}

	// add show line actions
	function showLine(i) {
		var line_mask:Mask = line_masks[i];
		var width_max = Math.sqrt(lines[i].width * lines[i].width + lines[i].height * lines[i].height);
		return new Tween(line_mask.rect_mc, "width", Strong.easeOut, 0, width_max, DURATION, true);
	}
	for (i = 0; i < lines.length; i++)
		addAction(showLine, i, TweenEvent.MOTION_FINISH);

	// add finish message action
	function done(arg) {
		message_txt.text = "Convex hull constructed.";
	}
	addAction(done, null, null);
}

function GrahamScan(points:Array):Array {
	// special cases: 0, 1, or 2 points
	if (points.length == 0)
		return [];
	if (points.length == 1)
		return [points[0]];
	if (points.length == 2) {
		if (comparePoints(points[0],points[1]) < 0)
			return [points[0], points[1]];
		else
			return [points[1], points[0]];
	}

	// find index of leftmost point
	var left_idx = 0;
	for (var i = 1; i < points.length; i++) {
		if (comparePoints(points[left_idx], points[i]) > 0)
			left_idx = i;
	}

	// sort points by angle to leftmost point
	var left:Point = points[left_idx];
	var sorted:Array = new Array();
	for (i = 0; i < points.length; i++) {
		if (i != left_idx)
			sorted.push(points[i]);
	}
	function comp(p1:Point,p2:Point):int {
		var cmp1 = (p1.y - left.y) * (p2.x - left.x);
		var cmp2 = (p2.y - left.y) * (p1.x - left.x);
		if (cmp1 < cmp2)
			return -1;
		else if (cmp1 > cmp2)
			return 1;
		else
			return 0;
	}
	sorted.sort(comp);

	// pushed sorted list of vertices onto input stack
	var input:Array = sorted.reverse();

	// run graham scan
	var output:Array = new Array();
	output.push(left);
	output.push(input.pop());
	while (input.length > 0) {
		var point:Point = input.pop();
		var ccw;
		while ((ccw = CCW(output[output.length-2],output[output.length-1],point)) < 0)
			output.pop();
		// fix for collinearity
		if (ccw == 0 && sqDist(output[output.length-2],output[output.length-1]) > sqDist(output[output.length-2],point)) {
			var temp:Point = output.pop();
			output.push(point);
			point = temp;
		}
		output.push(point);
	}

	/* return point array as output */
	return output;
}

function Chan(points:Array):Array {
	// special cases: 0 or 1 points
	var n = points.length;
	if (n == 0)
		return [];
	if (n == 1)
		return [points[0]];

	// square the guess of h each iteration
	for (var m = 2; m != null; m = m == n ? null : Math.min(m*m,n)) {
		// partition points
		var parts:Array = new Array(Math.ceil(n/m));
		var curr_part = 0;
		var idx = 0;
		for (var i = 0; i < n; i++) {
			// go to next partition
			if (idx == m) {
				curr_part++;
				idx = 0;
			}
			// initiaze new partition
			if (idx == 0)
				parts[curr_part] = new Array(Math.min(m,n-i));
			// add point to partition
			parts[curr_part][idx] = points[i];
			idx++;
		}
		// run graham scan on each partition
		var ch:Array = new Array(parts.length);
		for (curr_part = 0; curr_part < parts.length; curr_part++)
			ch[curr_part] = GrahamScan(parts[curr_part]);
		// find leftmost point
		var ch_idx = 0;
		idx = 0;
		for (i = 1; i < ch.length; i++) {
			if (comparePoints(ch[ch_idx][0], ch[i][0]) > 0)
				ch_idx = i;
		}
		var output:Array = new Array();
		output.push(ch[ch_idx][0]);
		// run jarvis march, stop if we realize m < h
		for (i = 1; i <= m; i++) {
			// find rightmost point
			var ch_right = null;
			var right_idx;
			for (var curr_ch = 0; curr_ch < ch.length; curr_ch++) {
				var curr_right_idx;
				if (curr_ch == ch_idx) {
					if (ch[ch_idx].length == 1)
						continue;
					curr_right_idx = (idx + 1) % ch[ch_idx].length;
				}
				else
					curr_right_idx = rightmost(ch[ch_idx][idx], ch[curr_ch]);
				if (ch_right == null || right(ch[ch_idx][idx], ch[curr_ch][curr_right_idx], ch[ch_right][right_idx]) > 0) {
					ch_right = curr_ch;
					right_idx = curr_right_idx;
				}
			}
			// if found starting point, done
			if (ch[ch_right][right_idx] == output[0])
				return output;
			// add to convex hull
			output.push(ch[ch_right][right_idx]);
			ch_idx = ch_right;
			idx = right_idx;
		}
	}
	// if all guesses failed, just use graham scan
	return GrahamScan(points);
}

// TODO: fix case where points are collinear
function right(p:Point, p1:Point, p2:Point):int {
	var ccw = CCW(p2, p, p1);
	if (ccw == 0) {
		trace("COLLINEAR " + p.x + "," + p.y + " " + p1.x + "," + p1.y + " " + p2.x + "," + p2.y);
		try {
			throw new Error('StackTrace');
		} catch (e:Error) {
			trace(e.getStackTrace());
		}

		var dist1 = sqDist(p, p1);
		var dist2 = sqDist(p, p2);
		if (dist1 < dist2)
			return 1;
		else if (dist1 > dist2)
			return -1;
		else
			return 0;
	}
	else
		return ccw;
}
function rightmost(p:Point, points:Array) {
	var low = 0;
	var high = points.length - 1;
	while (low != high) {
		// special case: 2 points left
		if (low+1 == high) {
			if (right(p,points[low],points[high]) > 0)
				return low;
			else
				return high;
		}
		// split in middle, eliminate half
		var mid = Math.ceil((low + high) / 2);
		if (right(p,points[mid],points[low]) > 0) {
			if (right(p,points[mid-1],points[mid]) > 0) {
				low = low + 1;
				high = mid - 1;
				continue;
			}
			if (right(p,points[mid+1],points[mid]) > 0) {
				low = mid + 1;
				continue;
			}
			return mid;
		}
		else {
			if (right(p,points[high],points[low]) > 0) {
				low = mid + 1;
				continue;
			}
			if (right(p,points[low+1],points[low]) > 0) {
				low = low + 1;
				high = mid - 1;
				continue;
			}
			return low;
		}
	}
	// left with only 1 point, the rightmost
	return low;
}

var curr_action;
var curr_event;
var actions:Array = new Array();
var args:Array = new Array();
var listen_events:Array = new Array();
function addAction(action:Function, arg, finish_event) {
	if (curr_action == null) {
		if (finish_event == null)
			action(arg);
		else {
			curr_action = action(arg);
			curr_event = finish_event;
			curr_action.addEventListener(finish_event, actionFinished);
		}
	}
	else {
		actions.push(action);
		args.push(arg);
		listen_events.push(finish_event);
	}
}
function removeActions() {
	if (curr_action != null) {
		curr_action.removeEventListener(curr_event, actionFinished);
		curr_action = null;
		actions = new Array();
		args = new Array();
		listen_events = new Array();
	}
}

function actionFinished(e:Event) {
	// reverse arrays (so we pop from front)
	actions = actions.reverse();
	args = args.reverse();
	listen_events = listen_events.reverse();

	// pop next action until need to wait
	var do_next:Boolean = true;
	while (do_next) {
		if (actions.length == 0) {
			curr_action = null;
			do_next = false;
		}
		else {
				curr_action = (actions.pop())(args.pop());
				curr_event = listen_events.pop();
				if (curr_event != null) {
					curr_action.addEventListener(curr_event, actionFinished);
					do_next = false;
				}
		}
	}

	// reverse arrays back to normal
	actions = actions.reverse();
	args = args.reverse();
	listen_events = listen_events.reverse();
}
